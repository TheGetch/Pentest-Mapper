1,Transport Layer,Encryption: ensure secure ciphers are used and outdated SSL/TLS versions are not being used; check key lengths (sslscan/testssl.sh),
2,Transport Layer,Presence of the HTTP Strict-Transport-Security Header,
3,Transport Layer,Check for redirection of all unencrypted traffic to encrypted,
4,Authentication,Test default credentials (if applicable),
5,Authentication,Uses encrypted channels,
6,Authentication,Does not distinguish between invalid usernames or invalid passwords (username enumeration) - Server responses remain the same,
7,Authentication,Requires at least username/password (1FA),
8,Authentication,Supports two factor authentication (2FA) if required by compliance/company policy,
9,Authentication,Test that 2FA is not only supported but enforced (cannot be bypassed,
10,Authentication,Test if the server response can be manipulated to bypass 2FA ,"{""success"":false} to {""success"":true} or changing HTTP status code  i.e. 403 Forbidden to 200 OK"
11,Authentication,Test null byte as 2FA code,
12,Authentication,Check if server leaks 2FA code in responses,
13,Authentication,Accounts lock after a defined number of failed login attempts,
14,Authentication,Users are notified of account lockouts,
15,Authentication,Password complexity is enforced to industry standard minimums,
16,Authentication,Passwords are obscured when entering,
17,Authentication,Passwords cannot be blank,
18,Authentication,User identifiers are unique,
19,Authentication,Test RBAC enforcement,
20,Authentication,Users cannot access other user data,
21,Authentication,Users cannot access admin functionality,
22,Authentication,Users cannot edit other user data,
23,Authentication,Users cannot brute-force data identifiers,
24,Authentication,"Test ""Remember me"" or ""Keep me logged in"" functionality",
25,Authentication,Ensure cookie is set with HTTPOnly flag,
26,Authentication,Ensure token or cookie cannot be brute-forced or guessed,
27,Authentication,"Check if autocomplete=""off"" is enabled within the FORM tag or within the INPUT tags.",
28,Authentication,Test the password reset and password recovery functionalities (if applicable),
29,Authentication,Ensure password reset link and/or codes are unique/non-guessable,
30,Authentication,Check if reset link can be manipulated in a way to be used for another user,
31,Authentication,Check if security questions be brute-forced,
32,Authentication,Check if password links expire,
33,Authentication,Check that if more than one link is requested that the older links are invalidated,
34,Authentication,If authenticated test the password change procedure,
35,Authentication,Check if the current active sessions get invalidated after password change (optional but good practice),
36,Authentication,Test specially crafted usernames to overwrite default application pages,i.e. /images/companylogo.jpg
37,Authentication,Attempt to access resources while unauthenticated,
38,Authentication,Attempt to access administrative functionalities as a low-access-level user,
39,Post Authentication,Check if user ID is used to retrieve data,
40,Post Authentication,Try other user IDs or brute force (IDOR),
41,Post Authentication,Document features and functionalities tied to different access-leveled accounts (applicable if you have ,
42,Post Authentication,Test features that change account information  i.e. email change  password change  phone number change  etc.,
43,Post Authentication,Test if these changes are vulnerable to CSRF,
44,Sessions,Test that session tokens are secure (Use Burp's Sequencer for testing entropy of cookies set),
45,Sessions,Ensure tokens are not re-used (session fixation  CSRF token reuse  password reset token reuse  2FA tokens),
46,Sessions,Check session expiration limit,
47,Sessions,Session destruction: Check if sessions are destroyed on the server  not just deleted in the browser. Resend ,
48,Sessions,Check if secure  flag is set on all session cookies (prevents the browser from sending cookies over ,
49,Sessions,Check if HttpOnlyflag is set on all session cookies (prevents XSS attacks from accessing cookies),
50,Sessions,Ensure session data is stored server-side and not in the cookie (excludes ViewStates  JWTs - see next item),
51,Sessions,Ensure client-stored session information is cryptographically protected,ViewStates; JWTs
52,Sessions,If so  check if: HMAC uses a strong secret (can attempt to brute force w/ hashcat) and Encrypted tokens use a ,
53,Sessions,Sessions are invalidated after IP change (optional  but good practice for high security),
54,Sessions,Check if concurrent logins are allowed (optional if logins are supposed to be limited),
55,Sessions,Ensure JWT tokens are signed using a secure algorithm,
56,Sessions,"Try signing a modified token with the ""none"" algorithm",
57,Sessions,Change the signing algorithm  i.e. from HS256 to RS356  etc.,
58,Account Management,Users are notified on account updates,
59,Account Management,Email change (notification sent to both old and new),
60,Account Management,Password change,
61,Account Management,Passwords expire after defined period,
62,Account Management,Users are notified on password expiration,
63,Account Management,Password resets do not reveal account information (i.e. usernames  emails  partially obscured emails,i.e. te**********st@test.com
64,Account Management,Password changes require authentication,
65,Account Management,Password changes require the old password,
66,Account Management,2FA changes require password,
67,Account Management,Email change requires password,
68,Account Management,Users cannot register a new account with the same name as an existing account,
69,Account Management,Default accounts have had passwords changed,
70,Administration,Administrative consoles are not exposed (varies by application/technology),
71,Administration,Users are not administrators,
72,Administration,Authentication is required for administrative activities,
73,Administration,Unauthorized users cannot access administrative functions,
74,Administration,Application passwords are not exposed,i.e. connection strings
75,Configuration,No unnecessary services are exposed,admin or panels on 8080/8443 etc.
76,Configuration,Firewalls are enabled and configured correctly,
77,Configuration,Check if application components are up-to-date,
78,Configuration,Check if directory indexing is not enabled,
79,Configuration,Source code is not disclosed,
80,Configuration,Source code backups do not exist,i.e. index.php~ or index.php.bak
81,Configuration,Minimum permissions are used for system components ,i.e. not using 'sa' or 'root' for database access or running as 'root' for the application software
82,Configuration,Load balancers do not expose internal IPs,
83,Application tests,Check for robots.txt,
84,Application tests,No sensitive information is disclosed,Such as /private  /logs etc.
85,Application tests,Pages require authentication where necessary,
86,Application tests,Pages honor POST vs GET requests,i.e. you cannot swap a GET to a POST
87,Application tests,User controlled data is not used in a serialized fashion,i.e. user controlled data stored/sent in a deserialized Java object
88,Application tests,Known formats are processed,"i.e. Endpoints only accept application/x-www-form-urlencoded or application/json, and JSON endpoints do not accept XML"
89,Application tests,Test for HTTP Request Smuggling,use the Smuggle Probe that's part of the Burp Suite HTTP Request Smuggling extension
90,Application tests,Test for HTTP verb tampering,
91,CSRF,CSRF protections are implemented,
92,CSRF,CSRF tokens are strictly validated in every case before the relevant action is executed.,
93,CSRF,CSRF protections cannot be bypassed by removing the tokens,
94,CSRF,CSRF protections cannot be bypassed by using invalid tokens,
95,CSRF,CSRF protections cannot be bypassed using another user's valid token (must be tied to each user's session),
96,CSRF,CSRF protections are unpredictable with high entropy,
97,SSRF,Test SSRF within open redirects (if open redirects were found),
98,SSRF,Try localhost/127.0.0.1 SSRF payloads or other internal IPs (if known),
99,SSRF,Use alternative IP representation of 127.0.0.1 such as 2130706433 017700000001  or 127.1.,
100,SSRF,Register your own domain name that resolves to 127.0.0.1. You can use spoofed.burpcollaborator.net for this purpose.,
101,SSRF,Obfuscate blocked strings using URL encoding or case variation.,
102,SSRF,For out-of-band SSRF testing use Burp Collaborator,
103,SSRF,Injection SSRF payload into Referer header,
104,Parameter testing,Test for unkeyed and/or hidden parameters (use Param Miner),
105,Parameter testing,Test if there are any responses changes when POST parameters are included in GETs and vice versa.,
106,Parameter testing,Test each query parameter (where possible) for SQLi,
107,Parameter testing,Inject Null byte (%00) before SQL payload,
108,Parameter testing,Use SQL inline comment sequence ,i.e. 0/**/or/**/1
109,Parameter testing,URL encode the SQLi payload,
110,Parameter testing,Change case of SQLi payload,Upper/lowercase  i.e. uNIon SelEct
111,Parameter testing,Use sqlmap tamper scripts,
112,Parameter testing,Test each query parameter (where possible) for NoSQLi,
113,Parameter testing,Test each query parameter (where possible) for XSS (Stored  Reflected  DOM),
114,Parameter testing,Test file uploads for XSS (svg filetypes),
115,Parameter testing,If some tags are blacklisted  use Burp Intruder to determine allowed HTML tags,
116,Parameter testing,Change GET requests to POST requests and vice versa. Might bypass parameter filtering,
117,Parameter testing,Change case for XSS payloads,Upper/lowercase  i.e. sCritPt
118,Parameter testing,Encode characters for XSS payloads ,i.e. s%63ript
119,Parameter testing,Test each query parameter (where possible) for Command Injection,
120,Parameter testing,Test each query parameter (where possible) for HPP (HTTP Parameter Pollution),
121,Parameter testing,Test each query parameter (where possible) for Null byte injection (all variants),
122,Parameter testing,Test each query parameter (where possible) for Path manipulation,
123,Parameter testing,Test each query parameter (where possible) for directory traversal,
124,Parameter testing,Try different encodings for directory traversal,%2e%2e%2f or %252e%252e%252f or ..%c0%af or ..%ef%bc%8f
125,Parameter testing,Try nested traversal sequences,....// or ....\/
126,Parameter testing,Test each query parameter (where possible) for XML/XXE attacks,
127,Parameter testing,Test each query parameter (where possible) for Type errors,Converting to arrays  vs integers  vs strings
128,Parameter testing,Test each query parameter (where possible) for SSI (Server Side Includes),
129,Parameter testing,Test each query parameter (where possible) for SSTI (Server Side Template Injection),
130,Parameter testing,Test each query parameter (where possible) for open redirects.,
131,Parameter testing,Test each query parameter (where possible) for LFI and RFI,
132,Parameter testing,Check if Web Sockets are being used and attempt injections into user-supplied input,
133,Header testing,Check Content Security Policy (CSP) implementation,No insecure directives (unsafe-inline  unsafe-eval)
134,Header testing,Check for HTTP security headers,X-XSS-Protection; X-Frame-Options; CSP; HSTS
135,Header testing,Test for unkeyed and/or hidden headers,Use Param Miner
136,Header testing,Supply an arbitrary Host header,
137,Header testing,Check for flawed validation,i.e. Host: vulnerable-website.com:bad-stuff-here or Host: hacked-subdomain.vulnerable-website.com
138,Header testing,Inject duplicate Host headers,
139,Header testing,Supply an absolute URL, i.e. GET https://vulnerable-website.com/ HTTP/1.1 \n Host: bad-stuff-here
140,Header testing,Add line wrapping,
141,Header testing,Inject host override headers , i.e. X-Host; X-Forwarded-Server; X-HTTP-Host-Override; Forwarded
142,Header testing,Check for SQLi within request headers,
143,Header testing,Test CORS implementation: Inject an Origin request header and see if it is reflected in the Access-Control-Allow-Origin response header,
144,Header testing,Test CORS implementation: Test for Origin header parsing errors  i.e. victim.com.evil.com may be allowed,
145,Header testing,Test CORS implementation: Send a request with Origin header set to null,
146,File upload testing,Test for unrestricted file uploads,
147,File upload testing,If any file type allowed attempt web shell upload,
148,File upload testing,Test for file type validation,
149,File upload testing,Change Content-Type header within the form-data of the request,
150,File upload testing,Test for path traversal within the filename of the uploaded file.,Encoding for ../ might be required  i.e. ..%2f
151,File upload testing,If file blacklisting is observed - attempt bypasses  i.e. if .php is blacklisted  try .php5. Use Burp Intruder and the file extension payloads to fuzz for blacklisted extensions.,
152,File upload testing,Attempt to upload a malicious .htaccess or web.config file.,
153,File upload testing,File extension obfuscation: Provide multiple extensions. Depending on the algorithm used to parse the filename  the following file may be interpreted as either a PHP file or JPG image: exploit.php.jpg,
154,File upload testing,File extension obfuscation: Add trailing characters. Some components will strip or ignore trailing whitespaces or dots,Such as: exploit.php.
155,File upload testing,File extension obfuscation: Try using the URL encoding (or double URL encoding) for dots and forward slashes and backward slashes. If the value isn't decoded when validating the file extension but is later decoded server-side this can also allow you to upload malicious files that would otherwise be blocked,exploit%2Ephp
156,File upload testing,File extension obfuscation: Add semicolons or URL-encoded null byte characters before the file extension. If validation is written in a high-level language like PHP or Java  but the server processes the file using lower-level functions in C/C++  for example  this can cause discrepancies in what is treated as the end of the filename,exploit.asp;.jpg or exploit.asp%00.jpg
157,File upload testing,File extension obfuscation: Try using multibyte unicode characters which may be converted to null bytes and dots after unicode conversion or normalization. ,Sequences like xC0 x2E  xC4 xAE or xC0 xAE may be translated to x2E if the filename parsed as a UTF-8 string  but then converted to ASCII characters before being used in a path.
158,File upload testing,Try including malicious code within image metadata,
159,File upload testing,Test if files can be uploaded with PUT,
160,File upload testing,If file parsing is being performed on uploaded files - such as xml parsing - try including XXE payloads,
161,File upload testing,Test if AntiVirus scanning is performed on uploads,
162,File upload testing,Can use the EICAR AV test file,
163,DOM-based vulnerability testing,Search JavaScript code for common sources,document.URL; document.documentURI; document.URLUnencoded; document.baseURI; location; document.cookie; document.referrer; window.name; history.pushState; history.replaceState; localStorage; sessionStorage; IndexedDB (mozIndexedDB/webkitIndexedDB/msIndexedDB); Database
164,DOM-based vulnerability testing,Search for sinks that can lead to DOM vulnerabilities,
165,Web Cache Poisoning,Use Param Miner Burp Suite extension to identify unkeyed inputs,
166,Web Cache Poisoning,Check for unkeyed port - Could cause temporary denial-of-service if arbitrary port is cached,
167,Web Cache Poisoning,Attempt XSS within a poisoned cache,
168,Web Cache Poisoning,"Use an unkeyed input that is reflected  i.e. X-Forwarded-Host: a.""><script>alert(1)</script>""",
169,Web Cache Poisoning,Check if URLs are dynamically generated within responses based off unkeyed headers  i.e.  X-Host  X-Forwarded-Host  etc.,
170,Web Cache Poisoning,Check if response content is dynamically generated from cookies,
171,Web Cache Poisoning,If Akamai-based; use Pragma: akamai-x-get-cache-key header in request to potentially display the cache key in response header,
172,Web Cache Poisoning,Check for unkeyed UTM query parameters  ,i.e. utm_content
173,Web Cache Poisoning,Cloak arbitrary parameters , i.e. GET /?example=123?excluded_param=bad-stuff-here
174,Web Cache Poisoning,"Test ""fat"" GET requests",
